; Leaflet-Module

; http://leafletjs.com/

DeclareModule Leaflet
  
  EnableExplicit
  
  Enumeration ; Set-/GetGadgetAttribute
    
    #LatLng = 1
    #LatLngs
    #FitBounds
    #Bounds
    #Zoom
    #Center
    #Data
    
    #Radius
    #Stroke 
    #Color
    #Weight
    #Opacity
    #LineCap
    #LineJoin
    #DashArray
    #DashOffset
    #Fill
    #FillColor
    #FillOpacity
    #FillRule
    #Renderer
    #ClassName
    
    #Popup
    #IsPopupOpen
    
    #Tooltip
    #IsTooltipOpen
    
    #IconUrl
    #IconImage
    #IconShadowUrl
    #IconSize
    #IconShadowSize
    #IconAnchor
    #IconShadowAnchor
    #IconPopupAnchor
    
    #TileLayerType_OpenStreetMap
    #TileLayerType_GoogleMapRoadmap
    #TileLayerType_GoogleMapSatellite
    #TileLayerType_GoogleMapHybrid
    #TileLayerType_GoogleMapTerrain
    #TileLayerType_Custom
    
  EndEnumeration
  
  EnumerationBinary	; EventTypes
    #EventType_AutopanStart = 1
    #EventType_BaseLayerChange
    #EventType_Blur
    #EventType_Click
    #EventType_ContextMenu
    #EventType_DblClick
    #EventType_Drag
    #EventType_DragEnd
    #EventType_DragStart
    #EventType_Focus
    #EventType_KeyPress
    #EventType_LayerAdd
    #EventType_LayerRemove
    #EventType_Load
    #EventType_LocationError
    #EventType_LocationFound
    #EventType_MouseDown
    #EventType_MouseMove
    #EventType_MouseOut
    #EventType_MouseOver
    #EventType_MouseUp
    #EventType_Move
    #EventType_MoveEnd
    #EventType_MoveStart
    #EventType_OverlayAdd
    #EventType_OverlayRemove
    #EventType_PopupClose
    #EventType_PopupOpen
    #EventType_PreClick
    #EventType_Resize
    #EventType_TooltipClose
    #EventType_TooltipOpen
    #EventType_Unload
    #EventType_ViewReset
    #EventType_Zoom
    #EventType_ZoomEnd
    #EventType_ZoomLevelsChange
    #EventType_ZoomStart
  EndEnumeration
  
  Global IsInitialized
  
  Declare Init(Callback)
  
  Declare BindGadget(Gadget)
  
  Declare GetMap(Gadget)
  Declare RedrawMap(Gadget)
  
  Declare NewTileLayer(TileLayerType, UrlTemplate.s = "", TileLayerOptions = 0)
  Declare NewFeatureGroup()
  Declare NewLayerGroup()
  Declare NewGeoJSON()
  
  Declare NewIcon        (Options      = #PB_Ignore)
  Declare NewMarker      (LatLng       = #PB_Ignore, Options = #PB_Ignore)
  
  ; Vector Layers
    
  Declare NewPolyline    (LatLngs      = #PB_Ignore, Options = #PB_Ignore)
  Declare NewPolygon     (LatLngs      = #PB_Ignore, Options = #PB_Ignore)
  Declare NewRectangle   (LatLngBounds = #PB_Ignore, Options = #PB_Ignore)
  Declare NewCircle      (LatLng       = #PB_Ignore, Options = #PB_Ignore)
  Declare NewCircleMarker(LatLng       = #PB_Ignore, Options = #PB_Ignore)
  
  Declare NewSVG()
  Declare NewCanvas()
  Declare NewImageOverlay()
  
  ;  
  
  
  Declare BindItemEvent(O, Callback, EventType.q = #PB_All)
  
  Declare SetAttribute(Gadget, Attribute, Value.d)
  Declare SetStringAttribute(Gadget, Attribute, Value.s)
  
  Declare GetAttribute(Gadget, Attribute)
  
  ; Methods
  
  Declare SetIcon(O, P1)
  Declare PanTo(O, LatLng)
  Declare SetView(O, LatLng, Zoom = #PB_Ignore)
  Declare ZoomIn(O)
  Declare ZoomOut(O)
  Declare OpenTooltip(O)
  Declare CloseTooltip(O)
  Declare ToggleTooltip(O)
  Declare OpenPopup(O)
  Declare ClosePopup(O)
  Declare TogglePopup(O)
  
  Declare LatLng(Lat.d, Lng.d)
  Declare LatLngBounds(LatLng1, LatLng2)
  
  Declare AddItem(O1, O2)
  Declare ClearLayers(LayerGroup)
  
EndDeclareModule

Module Leaflet
  
  Procedure Init(Callback)
    
    ! $("<link rel='stylesheet' type='text/css'>").attr("href", "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.2.0/leaflet.css").appendTo("head");
    
    ! require(["https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.2.0/leaflet.js"],
    !   function() {
    IsInitialized = #True
    ! 		v_callback();
    ! });    
    
  EndProcedure
  
  Procedure BindGadget(Gadget)
    
    If GadgetType(Gadget) = #PB_GadgetType_Container
      
      ! var dijitContentPane = $(spider_GadgetID(v_gadget).div).find('.dijitContentPane');
      
      !	var map = $(dijit.byId(spider_GadgetID(v_gadget).gadget.id)).data("map");
      
      ! if ( typeof map != 'undefined' ) {
      !   map.remove();
      !   dijitContentPane.empty();
      ! }
      
      !	map = L.map(dijitContentPane[0]).setView([0, 0], 1);
      
      ! spider.DojoAspect.after(dijit.byId(spider_GadgetID(v_gadget).gadget.id), "resize", function() {
      !   map.invalidateSize();
      ! });      
      
      ! $(dijit.byId(spider_GadgetID(v_gadget).gadget.id)).data("map", map);
      
      ! return map;
      
    Else
      
      Debug "BindGadget: Unsupported Gadget!"
      
    EndIf
    
  EndProcedure
  
  Procedure GetMap(Gadget)
    ! return $(dijit.byId(spider_GadgetID(v_gadget).gadget.id)).data("map");
  EndProcedure
  
  Procedure RedrawMap(Gadget)
    ! var map = $(dijit.byId(spider_GadgetID(v_gadget).gadget.id)).data("map");
    ! map.invalidateSize();
  EndProcedure
  
  Procedure SetStringAttribute(O, Attribute, Value.s)
    
    Select Attribute
        
      Case #Popup
        
        If Value = ""
          ! v_o.unbindPopup();
        Else
          ! v_o.bindPopup(v_value);
        EndIf
        
      Case #Tooltip
        
        If Value = ""
          ! v_o.unbindTooltip();
        Else
          ! v_o.bindTooltip(v_value);
        EndIf
        
        ; ! v_o.setTooltipContent(v_v_value);
        ; ! return v_o.getTooltip();        
        
      Case #IconUrl
        ! v_o.options.iconUrl = v_value;
        
      Case #IconShadowUrl
        ! v_o.options.shadowUrl = v_value;
        
      Default
        Debug "unknown attribute"
        
    EndSelect
    
  EndProcedure
  
  Procedure SetAttribute(O, Attribute, Value.d)
    
    Protected Ex
    
    ! try {
    
    Select Attribute
        
      Case #Data
        ! v_o.addData(v_value);
        
      Case #Bounds
        ! v_o.setBounds(v_value); // LatLngBounds
        
      Case #LatLng
        ! v_o.setLatLng(v_value);
        
      Case #LatLngs
        ! v_o.setLatLngs(v_value);
        
      Case #FitBounds
        ! v_o.fitBounds(v_value);
        
      Case #IconImage
        ! v_o.options.iconUrl  = spider_EncodeImage(v_value);
        ! v_o.options.iconSize = [ spider_ImageWidth(v_value) , spider_ImageHeight(v_value) ];
        
      Case #IconSize
        ! v_o.options.iconSize = v_value;
        
      Case #IconShadowSize
        ! v_o.options.shadowSize = v_value;
        
      Case #IconAnchor
        ! v_o.options.iconAnchor = v_value;
        
      Case #IconShadowAnchor
        ! v_o.options.shadowAnchor = v_value;
        
      Case #IconPopupAnchor
        ! v_o.options.popupAnchor = v_value;
        
      Case #Radius
        ! v_o.setRadius(v_value);
                
      Case #Stroke 
        ! v_o.setStyle( { stroke : v_value } );
        
      Case #Weight
        ! v_o.setStyle( { weight : v_value } );
        
      Case #Opacity
        ! v_o.setStyle( { opacity : v_value } );
        
      Case #LineCap
        ! v_o.setStyle( { lineCap : v_value } );
        
      Case #LineJoin
        ! v_o.setStyle( { lineJoin : v_value } );
        
      Case #DashArray
        ! v_o.setStyle( { dashArray : v_value } );
        
      Case #DashOffset
        ! v_o.setStyle( { dashOffset : v_value } );
        
      Case #Fill
        ! v_o.setStyle( { fill : v_value } );
        
      Case #FillOpacity
        ! v_o.setStyle( { fillOpacity : v_value } );
        
      Case #FillRule
        ! v_o.setStyle( { fillRule : v_value } );
        
      Case #Renderer
        ! v_o.setStyle( { renderer : v_value } );
        
      Case #ClassName
        ! v_o.setStyle( { className : v_value } );
        
      Case #Color
        ! v_o.setStyle( { color : spider_helper_ColorToHtml(v_value) } );
        
      Case #FillColor
        ! v_o.setStyle( { fillColor : spider_helper_ColorToHtml(v_value) } );
        
      Case #Zoom
        !	v_o.setZoom(v_value);
        
      Default
        
        Debug "unknown attribute"
        
    EndSelect
    
    ! } catch (v_ex) {
    Debug Ex
    ! }
        
  EndProcedure
  
  Procedure GetAttribute(O, Attribute)
    
    Select Attribute
        
      Case #Bounds
        ! return v_o.getBounds(); // LatLngBounds
        
      Case #IsPopupOpen
        ! v_o.isPopupOpen();
        
      Case #IsTooltipOpen
        ! v_o.isTooltipOpen();
        
      Case #LatLng
        ! return v_o.getLatLng();        
        
      Case #Zoom
        !	return v_o.getZoom();
        
    EndSelect
    
  EndProcedure
  
  ; Methods
    
  Procedure SetIcon(O, P1)
    ! v_o.setIcon(v_p1);    
  EndProcedure
  Procedure PanTo(O, LatLng)
    ! v_o.panTo(v_latlng);
  EndProcedure
  Procedure SetView(O, LatLng, Zoom = #PB_Ignore)
    If Zoom = #PB_Ignore
      ! v_o.setView(v_latlng);
    Else
      ! v_o.setView(v_latlng, v_zoom);
    EndIf
  EndProcedure
  Procedure ZoomIn(O)
    !	v_o.zoomIn();
  EndProcedure
  Procedure ZoomOut(O)
    !	v_o.zoomOut();
  EndProcedure
  Procedure OpenTooltip(O)
    ! v_o.openTooltip();
  EndProcedure      
  Procedure CloseTooltip(O)
    ! v_o.closeTooltip();
  EndProcedure
  Procedure ToggleTooltip(O)
    ! v_o.toggleTooltip();
  EndProcedure
  Procedure OpenPopup(O)
    ! v_o.openPopup();
  EndProcedure
  Procedure ClosePopup(O)
    ! v_o.closePopup();
  EndProcedure
  Procedure TogglePopup(O)
    ! v_o.togglePopup();
  EndProcedure
  
  ; Events
  
  Procedure bme(Marker, event.s, etype, etypes, callback)
    If etypes & etype = etype
      ! v_marker.on(v_event, function(e) { v_callback(e); });
    EndIf
  EndProcedure    
  
  Procedure BindItemEvent(O, Callback, EventType.q = #PB_All)
    
    If EventType = #PB_All
      
      EventType =	 #EventType_AutopanStart |
                 	 #EventType_BaseLayerChange |
                 	 #EventType_Blur |
                 	 #EventType_Click |
                 	 #EventType_ContextMenu |
                 	 #EventType_DblClick |
                 	 #EventType_Drag |
                 	 #EventType_DragEnd |
                 	 #EventType_DragStart |
                 	 #EventType_Focus |
                 	 #EventType_KeyPress |
                 	 #EventType_LayerAdd |
                 	 #EventType_LayerRemove |
                 	 #EventType_Load |
                 	 #EventType_LocationError |
                 	 #EventType_LocationFound |
                 	 #EventType_MouseDown |
                 	 #EventType_MouseMove |
                 	 #EventType_MouseOut |
                 	 #EventType_MouseOver |
                 	 #EventType_MouseUp |
                 	 #EventType_Move |
                 	 #EventType_MoveEnd |
                 	 #EventType_MoveStart |
                 	 #EventType_OverlayAdd |
                 	 #EventType_OverlayRemove |
                 	 #EventType_PopupClose |
                 	 #EventType_PopupOpen |
                 	 #EventType_PreClick |
                 	 #EventType_Resize |
                 	 #EventType_TooltipClose |
                 	 #EventType_TooltipOpen |
                 	 #EventType_Unload |
                 	 #EventType_ViewReset |
                 	 #EventType_Zoom |
                 	 #EventType_ZoomEnd |
                 	 #EventType_ZoomLevelsChange |
                 	 #EventType_ZoomStart
      
    EndIf
    
    ; Layer events
    ; 	Event	Data	Description
    ; 	baselayerchange 	LayersControlEvent	Fired when the base layer is changed through the layer control.
    ; 	overlayadd 	LayersControlEvent	Fired when an overlay is selected through the layer control.
    ; 	overlayremove 	LayersControlEvent	Fired when an overlay is deselected through the layer control.
    ; 	layeradd 	LayerEvent	Fired when a new layer is added to the map.
    ; 	layerremove 	LayerEvent	Fired when some layer is removed from the map
    
    bme(O, "baselayerchange", #EventType_BaseLayerChange, EventType, Callback)
    bme(O, "overlayadd",      #EventType_OverlayAdd,      EventType, Callback)
    bme(O, "overlayremove",   #EventType_OverlayRemove,   EventType, Callback)
    bme(O, "layeradd",        #EventType_LayerAdd,        EventType, Callback)
    bme(O, "layerremove",     #EventType_LayerRemove,     EventType, Callback)
    
    ; Popup events
    ; 	Event	Data	Description
    ; 	popupopen 	PopupEvent	Fired when a popup is opened in the map
    ; 	popupclose 	PopupEvent	Fired when a popup in the map is closed
    ; 	autopanstart 	Event	Fired when the map starts autopanning when opening a popup.
    
    bme(O, "popupopen",    #EventType_PopupOpen,    EventType, Callback)
    bme(O, "popupclose",   #EventType_PopupClose,   EventType, Callback)
    bme(O, "autopanstart", #EventType_AutopanStart, EventType, Callback)
    
    ; Tooltip events
    ; 	Event	Data	Description
    ; 	tooltipopen 	TooltipEvent	Fired when a tooltip is opened in the map.
    ; 	tooltipclose 	TooltipEvent	Fired when a tooltip in the map is closed.
    
    
    bme(O, "tooltipopen",  #EventType_TooltipOpen,  EventType, Callback)
    bme(O, "tooltipclose", #EventType_TooltipClose, EventType, Callback)
    
    ; Location events
    ; 	Event	Data	Description
    ; 	locationerror 	ErrorEvent	Fired when geolocation (using the locate method) failed.
    ; 	locationfound 	LocationEvent	Fired when geolocation (using the locate method) went successfully.
    
    
    bme(O, "locationerror", #EventType_LocationError, EventType, Callback)
    bme(O, "locationfound", #EventType_LocationFound, EventType, Callback)
    
    ; Map state change events
    ; 	Event	Data	Description
    ; 	zoomlevelschange	Event	Fired when the number of zoomlevels on the map is changed due to adding or removing a layer.
    ; 	resize 	ResizeEvent	Fired when the map is resized.
    ; 	unload 	Event	Fired when the map is destroyed with remove method.
    ; 	viewreset 	Event	Fired when the map needs to redraw its content (this usually happens on map zoom or load). Very useful for creating custom overlays.
    ; 	load 	Event	Fired when the map is initialized (when its center and zoom are set for the first time).
    ; 	zoomstart 	Event	Fired when the map zoom is about to change (e.g. before zoom animation).
    ; 	movestart 	Event	Fired when the view of the map starts changing (e.g. user starts dragging the map).
    ; 	zoom 	Event	Fired repeatedly during any change in zoom level, including zoom and fly animations.
    ; 	move 	Event	Fired repeatedly during any movement of the map, including pan and fly animations.
    ; 	zoomend 	Event	Fired when the map has changed, after any animations.
    ; 	moveend 	Event	Fired when the center of the map stops changing (e.g. user stopped dragging the map).
    
    bme(O, "zoomlevelschange", #EventType_ZoomLevelsChange, EventType, Callback)
    bme(O, "resize",           #EventType_Resize,           EventType, Callback)
    bme(O, "unload",           #EventType_Unload,           EventType, Callback)
    bme(O, "viewreset",        #EventType_ViewReset,        EventType, Callback)
    bme(O, "load",             #EventType_Load,             EventType, Callback)
    bme(O, "zoomstart",        #EventType_ZoomStart,        EventType, Callback)
    bme(O, "movestart",        #EventType_MoveStart,        EventType, Callback)
    bme(O, "zoom",             #EventType_Zoom,             EventType, Callback)
    bme(O, "move",             #EventType_Move,             EventType, Callback)
    bme(O, "zoomend",          #EventType_ZoomEnd,          EventType, Callback)
    bme(O, "moveend",          #EventType_MoveEnd,          EventType, Callback)
    
    ; Interaction events
    ; 	Event	Data	Description
    ; 	click 	MouseEvent	Fired when the user clicks (or taps) the map.
    ; 	dblclick 	MouseEvent	Fired when the user double-clicks (or double-taps) the map.
    ; 	mousedown 	MouseEvent	Fired when the user pushes the mouse button on the map.
    ; 	mouseup 	MouseEvent	Fired when the user releases the mouse button on the map.
    ; 	mouseover 	MouseEvent	Fired when the mouse enters the map.
    ; 	mouseout 	MouseEvent	Fired when the mouse leaves the map.
    ; 	mousemove 	MouseEvent	Fired while the mouse moves over the map.
    ; 	contextmenu	MouseEvent	Fired when the user pushes the right mouse button on the map, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).
    ; 	keypress 	KeyboardEvent	Fired when the user presses a key from the keyboard while the map is focused.
    ; 	preclick 	MouseEvent	Fired before mouse click on the map (sometimes useful when you want something to happen on click before any existing click handlers start running).
    
    bme(O, "click",            #EventType_Click,            EventType, Callback)
    bme(O, "dblclick",         #EventType_DblClick,         EventType, Callback)
    bme(O, "mousedown",        #EventType_MouseDown,        EventType, Callback)
    bme(O, "mouseup",          #EventType_MouseUp,          EventType, Callback)
    bme(O, "mouseover",        #EventType_MouseOver,        EventType, Callback)
    bme(O, "mouseout",         #EventType_MouseOut,         EventType, Callback)
    bme(O, "mousemove",        #EventType_MouseMove,        EventType, Callback)
    bme(O, "contextmenu",      #EventType_ContextMenu,      EventType, Callback)
    bme(O, "keypress",         #EventType_KeyPress,         EventType, Callback)
    bme(O, "preclick",         #EventType_PreClick,         EventType, Callback)
    
    ; Events
    ; 	Event	Data	Description
    ; 	move 	Event	Fired when the marker is moved via setLatLng or by dragging. Old and new coordinates are included in event arguments as oldLatLng, latlng.
    ; Dragging events
    ; 	Event	Data	Description
    ; 	dragstart 	Event	Fired when the user starts dragging the marker.
    ; 	movestart 	Event	Fired when the marker starts moving (because of dragging).
    ; 	drag 	Event	Fired repeatedly while the user drags the marker.
    ; 	dragend 	DragEndEvent	Fired when the user stops dragging the marker.
    ; 	moveend 	Event	Fired when the marker stops moving (because of dragging).
    
    bme(O, "dragstart", #EventType_DragStart, EventType, Callback)
    bme(O, "movestart", #EventType_MoveStart, EventType, Callback)
    bme(O, "drag",      #EventType_Drag,      EventType, Callback)
    bme(O, "dragend",   #EventType_DragEnd,   EventType, Callback)
    bme(O, "moveend",   #EventType_MoveEnd,   EventType, Callback)
    
  EndProcedure
  
  Procedure AddItem(O1, O2)
    Protected Ex
    ! try {
    !   v_o2.addTo(v_o1);
    ! } catch (v_ex) {
    Debug Ex
    ! }
  EndProcedure
  
  ; ---
  
  Procedure LatLng(Lat.d, Lng.d)
    ! return L.latLng(v_lat, v_lng);
  EndProcedure
  
  Procedure LatLngBounds(LatLng1, LatLng2)
    ! return L.latLngBounds(v_latlng1, v_latlng2);	
  EndProcedure
  
  Procedure NewMarker(LatLng = #PB_Ignore, Options = #PB_Ignore)
    ; L.marker(<LatLng> latlng, <Marker options> options?)
    If LatLng <> #PB_Ignore And Options = #PB_Ignore
      !	return L.marker( v_latlng );
    ElseIf LatLng <> #PB_Ignore And Options <> #PB_Ignore
      !	return L.marker( v_latlng, v_options );
    Else
      !	return L.marker( [0,0] );
    EndIf
  EndProcedure
  
  ; ---
  ; Vector Layers
  ; ---
  
  Procedure NewPolyline(LatLngs = #PB_Ignore, Options = #PB_Ignore)
    ; L.polyline(<LatLng[]> latlngs, <Polyline options> options?)
    If LatLngs <> #PB_Ignore And Options = #PB_Ignore
      !	return L.polyline( v_latlngs );
    ElseIf LatLngs <> #PB_Ignore And Options <> #PB_Ignore
      !	return L.polyline( v_latlngs, v_options );
    Else
      !	return L.polyline( [[0,0],[0,0]] );
    EndIf
  EndProcedure
  
  Procedure NewPolygon(LatLngs = #PB_Ignore, Options = #PB_Ignore)
    ; L.polygon(<LatLng[]> latlngs, <Polyline options> options?)
    If LatLngs <> #PB_Ignore And Options = #PB_Ignore
      !	return L.polygon( v_latlngs );
    ElseIf LatLngs <> #PB_Ignore And Options <> #PB_Ignore
      !	return L.polygon( v_latlngs, v_options );
    Else
      !	return L.polygon( [[0,0],[0,0]] );
    EndIf
  EndProcedure
  
  Procedure NewRectangle(LatLngBounds = #PB_Ignore, Options = #PB_Ignore)
    ; L.rectangle(<LatLngBounds> latLngBounds, <Polyline options> options?)
    If LatLngBounds <> #PB_Ignore And Options = #PB_Ignore
      !	return L.rectangle( v_latlngbounds );
    ElseIf LatLngBounds <> #PB_Ignore And Options <> #PB_Ignore
      !	return L.rectangle( v_latlngbounds, v_options );
    Else
      !	return L.rectangle( [[0,0],[0,0]] );
    EndIf    
  EndProcedure
  
  Procedure NewCircle(LatLng = #PB_Ignore, Options = #PB_Ignore)
    ; L.circle(<LatLng> latlng, <Circle options> options?)
    If LatLng <> #PB_Ignore And Options = #PB_Ignore
      !	return L.circle( v_latlng );
    ElseIf LatLng <> #PB_Ignore And Options <> #PB_Ignore
      !	return L.circle( v_latlng, v_options );
    Else
      !	return L.circle( [0,0] );
    EndIf
  EndProcedure
  
  Procedure NewCircleMarker(LatLng = #PB_Ignore, Options = #PB_Ignore)
    ; L.circleMarker(<LatLng> latlng, <CircleMarker options> options?)
    If LatLng <> #PB_Ignore And Options = #PB_Ignore
      !	return L.circleMarker( v_latlng );
    ElseIf LatLng <> #PB_Ignore And Options <> #PB_Ignore
      !	return L.circleMarker( v_latlng, v_options );
    Else
      !	return L.circleMarker( [0,0] );
    EndIf
  EndProcedure
  
  Procedure NewSVG()
    !	return L.svg();
  EndProcedure
  
  Procedure NewCanvas()
    !	return L.canvas();
  EndProcedure
  
  ; ---
  
  Procedure NewTileLayer(TileLayerType, UrlTemplate.s = "", TileLayerOptions = 0)
    
    Select TileLayerType
        
      Case #TileLayerType_OpenStreetMap
        If UrlTemplate = ""
          UrlTemplate = "http://{s}.tile.osm.org/{z}/{x}/{y}.png"
        EndIf
        If TileLayerOptions = 0
          ! v_tilelayeroptions = {minZoom: 8, maxZoom: 12};
        EndIf
        
      Case #TileLayerType_GoogleMapRoadmap
        If UrlTemplate = ""
          UrlTemplate = "http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}"
        EndIf
        If TileLayerOptions = 0
          ! v_tilelayeroptions = { maxZoom: 20, subdomains:['mt0','mt1','mt2','mt3'] };
        EndIf
        
      Case #TileLayerType_GoogleMapSatellite
        If UrlTemplate = ""
          UrlTemplate = "http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}"
        EndIf
        If TileLayerOptions = 0
          ! v_tilelayeroptions = { maxZoom: 20, subdomains:['mt0','mt1','mt2','mt3'] };
        EndIf
        
      Case #TileLayerType_GoogleMapHybrid
        If UrlTemplate = ""
          UrlTemplate = "http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}"
        EndIf
        If TileLayerOptions = 0
          ! v_tilelayeroptions = { maxZoom: 20, subdomains:['mt0','mt1','mt2','mt3'] };
        EndIf
        
      Case #TileLayerType_GoogleMapTerrain
        If UrlTemplate = ""
          UrlTemplate = "http://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}"
        EndIf
        If TileLayerOptions = 0
          ! v_tilelayeroptions = { maxZoom: 20, subdomains:['mt0','mt1','mt2','mt3'] };
        EndIf
        
      Case #TileLayerType_Custom
        ; ...
        
    EndSelect
    
    ! var tl = L.tileLayer(v_urltemplate, v_tilelayeroptions);
    ! return tl;
    
  EndProcedure  
  
  Procedure NewLayerGroup()
    ! return L.layerGroup();
  EndProcedure
  
  Procedure NewFeatureGroup()
    ! return L.featureGroup();
  EndProcedure
  
  Procedure NewGeoJSON()
    ! return L.geoJSON();
  EndProcedure
  
  Procedure NewImageOverlay()
    ! return L.imageOverlay();
  EndProcedure
    
  Procedure NewIcon(Options = #PB_Ignore)
    ; L.icon(<Icon options> options)
    If Options = #PB_Ignore
      ! v_options = { };
    EndIf
    !	return L.icon( v_options );
  EndProcedure
  
  ; ---
  
  Procedure RemoveLayer(LayerGroup, Layer)
    ! v_layergroup.removeLayer(v_layer);
  EndProcedure
  
  Procedure HasLayer(LayerGroup, Layer)
    ! return v_layergroup.hasLayer(v_layer);
  EndProcedure
  
  Procedure GetLayers(LayerGroup)
    ! return v_layergroup.getLayers();
  EndProcedure
  
  Procedure ClearLayers(LayerGroup)
    ! v_layergroup.clearLayers();
  EndProcedure
  
EndModule